************QUESTION****************
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:

    2
   / \
  1   3

Input: [2,1,3]
Output: true
Example 2:

    5
   / \
  1   4
     / \
    3   6

Input: [5,1,4,null,null,3,6]
Output: false
Explanation: The root node's value is 5 but its right child's value is 4.
***************************************
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isValidBST(self, root: TreeNode) -> bool:
        def recurse(root1,low,high):
            if root1==None:
                return True
            if root1.val<=low or root1.val>=high:
                return False
            if not recurse(root1.left,low,root1.val): # The current node becomes the high value for the left side 
                return False
            if not recurse(root1.right,root1.val,high): # The current node becomes the low value for the right side
                return False
            return True
    
        return recurse(root,low = float("-inf"),high = float("inf"))
