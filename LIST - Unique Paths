**********QUESTION*************
A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?

 

Example 1:


Input: m = 3, n = 7
Output: 28
Example 2:

Input: m = 3, n = 2
Output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down
Example 3:

Input: m = 7, n = 3
Output: 28
Example 4:

Input: m = 3, n = 3
Output: 6
****************************************
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        collection = [[0]*n for _ in range(m)]
        collection[0][0] = 1
        for i in range(m):
            for j in range(n):
                if m==0 and n==0:
                    continue
                elif i-1>=0 and j-1>=0:
                    collection[i][j] = collection[i][j] + collection[i-1][j] + collection[i][j-1]
                elif i==0 and j-1>=0:
                    collection[i][j] = collection[i][j] + collection[i][j-1]
                elif j==0 and i-1>=0:
                    collection[i][j] = collection[i][j] + collection[i-1][j]
        return collection[m-1][n-1]
                
#################### USING BACKTRACKING
class Solution:
    def uniquePaths(self, m: int, n: int) -> int:
        collection = [[0 for g in range(n)] for _ in range(m)]       # KEEPING A TABLE FOR MEMOIZATION
        def recurse(collection,i,j):
            if i>=m or j>=n:
                return 0
            if collection[i][j]>0:
                return collection[i][j]
            if i==m-1 and j==n-1:
                return 1
            collection[i][j] = recurse(collection,i+1,j) + recurse(collection,i,j+1)
            return collection[i][j]
        
        t = recurse(collection,0,0)
        return t
