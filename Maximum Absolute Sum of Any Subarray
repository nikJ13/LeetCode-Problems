###############QUESTION#####################
You are given an integer array nums. The absolute sum of a subarray [numsl, numsl+1, ..., numsr-1, numsr] is abs(numsl + numsl+1 + ... + numsr-1 + numsr).

Return the maximum absolute sum of any (possibly empty) subarray of nums.

Note that abs(x) is defined as follows:

If x is a negative integer, then abs(x) = -x.
If x is a non-negative integer, then abs(x) = x.
 

Example 1:

Input: nums = [1,-3,2,3,-4]
Output: 5
Explanation: The subarray [2,3] has absolute sum = abs(2+3) = abs(5) = 5.
Example 2:

Input: nums = [2,-5,1,-4,3,-2]
Output: 8
Explanation: The subarray [-5,1,-4] has absolute sum = abs(-5+1-4) = abs(-8) = 8.
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
#############################################
class Solution:
    def maxAbsoluteSum(self, nums: List[int]) -> int:
        glob,current_max = nums[0],nums[0]              # SINCE THE ABSOLUTE MAXIMUM SUM CAN EITHER BE MAX POSITIVE SUM OR MIN NEGATIVE SUM
        n = len(nums)                                   # SO KADANE'S ALGORITHM IS USED TWICE, ONE TO GET THE MAXIMUM POSITIVE SUM AND THE OTHER TO GET THE MINIMUM NEGATIVE SUM
        for i in range(1,n):                            # FIRST KADANE'S LOOP
            current_max = max(nums[i],current_max+nums[i])
            if current_max>glob:
                glob = current_max
        glob1,current_min = nums[0],nums[0]
        for i in range(1,n):                            # SECOND KADANE'S LOOP
            current_min = min(nums[i],current_min+nums[i])
            if current_min<glob1:
                glob1 = current_min
        return max(glob,abs(glob1))
