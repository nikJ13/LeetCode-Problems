
#Implement a trie with insert, search, and startsWith methods.

#Example:

#Trie trie = new Trie();

#trie.insert("apple");
#trie.search("apple");   // returns true
#trie.search("app");     // returns false
#trie.startsWith("app"); // returns true
#trie.insert("app");   
#trie.search("app");     // returns true

class Trie:

    def __init__(self):
        """
        Initialize your data structure here.
        """
        self.words = []

    def insert(self, word: str) -> None:
        """
        Inserts a word into the trie.
        """
        self.words.append(word)

    def search(self, word: str) -> bool:
        """
        Returns if the word is in the trie.
        """
        if word in self.words:
            return True
        else:
            return False

    def startsWith(self, prefix: str) -> bool:
        """
        Returns if there is any word in the trie that starts with the given prefix.
        """
        l = len(prefix)
        flag = 0
        for i in self.words:
            if i:
                if i[:l]==prefix:
                    return True
                else:
                    flag += 1
            else:
                return False
        if flag!=0:
            return False


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
###################################################################
ANOTHER METHOD 
###################################################################
class TrieNode:
    def __init__(self):
        self.children = {}
        self.ending = False
        
class Trie:

    def __init__(self):
        self.start = TrieNode()

    def insert(self, word: str) -> None:
        n = len(word)
        root = self.start
        for i in range(n):
            if word[i] not in root.children:
                root.children[word[i]] = TrieNode()
            root = root.children[word[i]]
        root.ending = True
            
    def search(self, word: str) -> bool:
        n = len(word)
        root = self.start
        for i in range(n):
            if word[i] not in root.children:
                return False
            root = root.children[word[i]]
        return root.ending

    def startsWith(self, prefix: str) -> bool:
        n = len(prefix)
        root = self.start
        for i in range(n):
            if prefix[i] not in root.children:
                return False
            root = root.children[prefix[i]]
        return True
        


# Your Trie object will be instantiated and called as such:
# obj = Trie()
# obj.insert(word)
# param_2 = obj.search(word)
# param_3 = obj.startsWith(prefix)
