*************QUESTION******************
You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.

Given an integer array flowerbed containing 0's and 1's, where 0 means empty and 1 means not empty, and an integer n, return if n new flowers can be planted in the flowerbed without violating the no-adjacent-flowers rule.

 

Example 1:

Input: flowerbed = [1,0,0,0,1], n = 1
Output: true
Example 2:

Input: flowerbed = [1,0,0,0,1], n = 2
Output: false
 

Constraints:

1 <= flowerbed.length <= 2 * 104
flowerbed[i] is 0 or 1.
There are no two adjacent flowers in flowerbed.
0 <= n <= flowerbed.length
*******************************************
class Solution:
    def canPlaceFlowers(self, flowerbed: List[int], n: int) -> bool:
        count = 0
        count1 = 0
        i = 0
        num = len(flowerbed)
        p = list(set(flowerbed))
        # if all the numbers in the array are zeros
        if len(p)==1 and p[0]==0:
            if num%2==0 and n<=(num//2):
                print(num//2)
                return True
            elif num%2!=0 and n<=((num//2)+1):
                print((num//2)+1)
                return True
            else:
                return False
        # if the array has only one element
        if num==1 and flowerbed[0]==1 and n>0:
            return False
        elif num==1 and flowerbed[0]==0 and n==1:
            return True
        elif num==1 and flowerbed[0]==1 and n==0:
            return True
        # for the cases when the starting few elements of the array are zeros
        for j in range(num):
            if flowerbed[j]==1:
                break
            else:
                count1 += 1
        if count1>1:
            n -= (count1//2)
        i = j
        # normal iteration of the array
        while i<num:
            if flowerbed[i]==1:
                if count > 2:
                    if count%2==0:
                        n -= ((count//2)-1)
                    else:
                        n -= (count//2)
                count = 0
                i += 1
            else:
                count += 1
                i += 1
        # for the cases when the last few elements of the array are zeros
        if count>1:
            n -= (count//2)
        if n<=0:
            return True
        else:
            return False
