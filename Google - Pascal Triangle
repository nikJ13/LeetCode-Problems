###################QUESTION########################
Given an integer numRows, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:


 

Example 1:

Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]
Example 2:

Input: numRows = 1
Output: [[1]]
 

Constraints:

1 <= numRows <= 30
########################################################
class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        ans = []
        def recurse(rows):
            #print(rows)
            if rows==1:
                ans.append([1])
                return
            recurse(rows-1)
            if rows==2:
                ans.append([1,1])
                return
            temp = [1]*rows
            j = 1
            n = len(ans[-1])
            #print(temp)
            for i in range(1,n):
                temp[j] = ans[-1][i]+ans[-1][i-1]
                j += 1
            ans.append(temp)
        recurse(numRows)
        return ans
