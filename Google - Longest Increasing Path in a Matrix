###################QUESTION#######################
Given an m x n integers matrix, return the length of the longest increasing path in matrix.

From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).

 

Example 1:


Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]
Output: 4
Explanation: The longest increasing path is [1, 2, 6, 9].
Example 2:


Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]
Output: 4
Explanation: The longest increasing path is [3, 4, 5, 6]. Moving diagonally is not allowed.
Example 3:

Input: matrix = [[1]]
Output: 1
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 200
0 <= matrix[i][j] <= 231 - 1
##################################################
class Solution:
    def longestIncreasingPath(self, matrix: List[List[int]]) -> int:
        n = len(matrix)
        m = len(matrix[0])
        visited = [[0 for _ in range(m)] for _ in range(n)]
        ans = 0
        def dfs(x,y,element,count):
            nonlocal visited,ans
            if x<0 or x>=n or y<0 or y>=m or visited[x][y]==1 or matrix[x][y]<=element:
                return
            ans = max(ans,count)
            visited[x][y] = 1
            dfs(x+1,y,matrix[x][y],count+1)
            dfs(x-1,y,matrix[x][y],count+1)
            dfs(x,y-1,matrix[x][y],count+1)
            dfs(x,y+1,matrix[x][y],count+1)
            visited[x][y] = 0
        for i in range(n):
            for j in range(m):
                dfs(i,j,-1,1)
        return ans
