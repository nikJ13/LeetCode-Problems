****************QUESTION**********************
The Fibonacci numbers, commonly denoted F(n) form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from 0 and 1. That is,

F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.
Given n, calculate F(n).

 

Example 1:

Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.
Example 2:

Input: n = 3
Output: 2
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.
Example 3:

Input: n = 4
Output: 3
Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.
 

Constraints:

0 <= n <= 30
***************************************************
# THIS SOLUTION IS USING RECURSION
class Solution:
    def fib(self, n: int) -> int:
        memo = [0 for k in range(n+1)]        # using memoization, where we store intermediate results, which can be referred from to make recursion faster
        def fib(j):
            if j==0:
                return 0
            elif j==1:
                return 1
            elif memo[j]!=0:
                return memo[j]
            else:
                memo[j] = fib(j-1)+fib(j-2)
                return memo[j]
        return fib(n)
