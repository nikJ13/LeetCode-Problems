*****************QUESTION*************************
Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

 

Example 1:

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
Example 2:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
 

Constraints:

1 <= nums.length <= 8
-10 <= nums[i] <= 10
*******************************************************
class Solution:
    def permuteUnique(self, nums: List[int]) -> List[List[int]]:
        n = len(nums)
        visited = [0]*n
        ans = []
        def recurse(list1,visited):
            nonlocal ans
            if len(list1)==n:
                ans.append(tuple(list1))
                return
            for j in range(n):
                if visited[j]==0:
                    visited[j] = 1
                    recurse(list1+[nums[j]],visited)
                    visited[j] = 0
        for i in range(len(nums)):
            if visited[i]==0:
                visited[i] = 1
                recurse([nums[i]],visited)
                visited[i] = 0
        ans = list(set(ans))
        m = len(ans)              # SINCE THERE MIGHT BE DUPLICATE PERMUTATIONS, THE LENGTH OF THE ANS LIST WOULD BE DIFFERENT AFTER REMOVING THE DUPLICATES
        for k in range(m):
            ans[k] = list(ans[k])
        return ans
