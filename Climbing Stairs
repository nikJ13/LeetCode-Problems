**********QUESTION*****************
You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Example 1:

Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps
Example 2:

Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
 

Constraints:

1 <= n <= 45
*********************************************
class Solution:
    def climbStairs(self, n: int) -> int:
        if n==1:
            return 1
        l = [-1]*(n+1)
        l[0] = 0
        l[1] = 1
        l[2] = 2
        def recurse(n):
            if l[n]!=-1:
                return l[n]
            print(n)
            print(l)
            l[n] = recurse(n-1) + recurse(n-2) # storing the nodes (different values of 'n') in the visited list (l)
            return recurse(n-1) + recurse(n-2)
        recurse(n)
        return l[n]
            
