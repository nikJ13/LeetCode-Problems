******************QUESTION*********************************
Given an n x n binary matrix grid, return the length of the shortest clear path in the matrix. If there is no clear path, return -1.

A clear path in a binary matrix is a path from the top-left cell (i.e., (0, 0)) to the bottom-right cell (i.e., (n - 1, n - 1)) such that:

All the visited cells of the path are 0.
All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).
The length of a clear path is the number of visited cells of this path.

 

Example 1:


Input: grid = [[0,1],[1,0]]
Output: 2
Example 2:


Input: grid = [[0,0,0],[1,1,0],[1,1,0]]
Output: 4
Example 3:

Input: grid = [[1,0,0],[1,1,0],[1,1,0]]
Output: -1
 

Constraints:

n == grid.length
n == grid[i].length
1 <= n <= 100
grid[i][j] is 0 or 1
***********************************************************
# MY SOLUTION (DOES BFS;ALMOST EFFICIENT)
class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        if grid[0][0]==1 or grid[-1][-1]==1:
            return -1
        moves = [(1,0),(0,1),(-1,0),(0,-1),(1,1),(-1,-1),(-1,1),(1,-1)]
        n = len(grid)
        visited = [[-1 for _ in range(n)] for i in range(n)]
        visited[0][0],que = 1,[(0,0)]
        while que:
            node = que.pop(0)
            for i in range(8):
                if node[0]+moves[i][0]<0 or node[0]+moves[i][0]>=n or node[1]+moves[i][1]<0 or node[1]+moves[i][1]>=n:
                    continue
                elif grid[node[0]+moves[i][0]][node[1]+moves[i][1]]==1:
                    continue
                if visited[node[0]+moves[i][0]][node[1]+moves[i][1]]==-1:
                    visited[node[0]+moves[i][0]][node[1]+moves[i][1]] = visited[node[0]][node[1]] + 1
                    que.append((node[0]+moves[i][0],node[1]+moves[i][1]))
        return visited[n-1][n-1]
                
# EFFICIENT SOLUTION (ALSO DOES BFS)
class Solution:
    def shortestPathBinaryMatrix(self, grid: List[List[int]]) -> int:
        n = len(grid)
        if grid[0][0] == 1:
            return -1
        if n == 1:
            return 1
        
        directions = [(1,0),(-1,0),(0,1),(0,-1),(1,1),(-1,-1),(1,-1),(-1,1)]
        queue = [[0,0]]
        grid[0][0] = 1
        
        step = 1               # THIS VARIABLE KEEPS TRACK OF THE NUMBER OF LEVELS TRAVERSED IN THE MATRIX
        while queue:
            size = len(queue)
            for i in range(size):
                r, c = queue.pop(0)
                if (r, c) == (n-1, n-1):
                    return step
                
                grid[r][c] = 1
                for dr, dc in directions:
                    r_new = r + dr
                    c_new = c + dc
                    if 0 <= r_new < n and 0 <= c_new < n and grid[r_new][c_new] != 1:
                        queue.append([r_new, c_new])
                        grid[r_new][c_new] = 1
            
            step += 1         # INCREMENT IN THE LEVEL AFTER TRAVERSING ALL THE NODES OF THAT LEVEL
        
        return -1
