*******************QUESTION****************************
Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).

The replacement must be in place and use only constant extra memory.

 

Example 1:

Input: nums = [1,2,3]
Output: [1,3,2]
Example 2:

Input: nums = [3,2,1]
Output: [1,2,3]
Example 3:

Input: nums = [1,1,5]
Output: [1,5,1]
Example 4:

Input: nums = [1]
Output: [1]
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 100
************************************************
class Solution:
    def nextPermutation(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        n = len(nums)
        if n==1:
            return nums
        min1 = 10000
        for i in range(n-2,-1,-1):         # traverse in reverse order and check if nums[i]<nums[i+1]
            if nums[i]<nums[i+1]:
                min1 = nums[i]
                break
        if min1==10000:                    # suppose there is no such value where nums[i]<nums[i+1] then just directly reverse the array
            g = 0
            h = n-1
            while g<h:                     # This while loop is to reverse the whole array
                t = nums[g]
                nums[g] = nums[h]
                nums[h] = t
                g += 1
                h -= 1
        else:
            min2 = 10000
            ind = 0
            for j in range(i+1,n):                   # find the next largest number of nums[i]
                if nums[j]>min1 and nums[j]<min2:    
                    min2 = nums[j]
                    ind = j
            temp = nums[i]                            # replace nums[i] with the next largest number
            nums[i] = min2
            nums[ind] = temp
            nums[i+1:n] = sorted(nums[i+1:n])         # sort the rest of the array (beyond nums[i])
