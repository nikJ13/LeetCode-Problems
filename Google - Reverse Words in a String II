############QUESTION######################
Given a character array s, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in s will be separated by a single space.

Your code must solve the problem in-place, i.e. without allocating extra space.

 

Example 1:

Input: s = ["t","h","e"," ","s","k","y"," ","i","s"," ","b","l","u","e"]
Output: ["b","l","u","e"," ","i","s"," ","s","k","y"," ","t","h","e"]
Example 2:

Input: s = ["a"]
Output: ["a"]
 

Constraints:

1 <= s.length <= 105
s[i] is an English letter (uppercase or lowercase), digit, or space ' '.
There is at least one word in s.
s does not contain leading or trailing spaces.
All the words in s are guaranteed to be separated by a single space.
################################################
class Solution:
    def reverseWords(self, s: List[str]) -> None:
        """
        Do not return anything, modify s in-place instead.
        """
        def reverse(start,end,str1):
            while start<end:
                str1[start],str1[end] = str1[end],str1[start]
                start += 1
                end -= 1
            return str1
        m = len(s)
        s = reverse(0,m-1,s)
        i = 0
        j = 0
        #print(s)
        while j<m:
            #print("here")
            if s[j]==" ":
                s = reverse(i,j-1,s)
                #print(s)
                i = j + 1
            elif j==m-1:
                s = reverse(i,j,s)
                #print(s)
            j += 1
