************QUESTION*******************
Given an m x n 2D binary grid grid which represents a map of '1's (land) and '0's (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.

 

Example 1:

Input: grid = [
  ["1","1","1","1","0"],
  ["1","1","0","1","0"],
  ["1","1","0","0","0"],
  ["0","0","0","0","0"]
]
Output: 1
Example 2:

Input: grid = [
  ["1","1","0","0","0"],
  ["1","1","0","0","0"],
  ["0","0","1","0","0"],
  ["0","0","0","1","1"]
]
Output: 3
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
grid[i][j] is '0' or '1'.
***********************************************************
class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        count = 0
        n = len(grid)
        m = len(grid[0])
        def recurse(grid,x,y):
            if x>=n or x<0 or y>=m or y<0 or grid[x][y]!="1":    # checking if the coordinates are out of boundary conditions
                return
            grid[x][y] = "2"        # if the current cell is not visited or not wateR, that means it is '1', thus, changing its status to '2' indicates that it has been visited
            recurse(grid,x+1,y)
            recurse(grid,x,y+1)
            recurse(grid,x-1,y)
            recurse(grid,x,y-1)
                                  # the above four statements show that the recurse function is called from all four neighbours of the current cell
        for i in range(n):
            for j in range(m):
                if grid[i][j]=="1":
                    recurse(grid,i,j)
                    count += 1          # THE ISLAND IS COUNTED
        return count
