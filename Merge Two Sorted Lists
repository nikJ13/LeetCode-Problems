************QUESTION******************
Merge two sorted linked lists and return it as a new sorted list. The new list should be made by splicing together the nodes of the first two lists.

 

Example 1:


Input: l1 = [1,2,4], l2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: l1 = [], l2 = []
Output: []
Example 3:

Input: l1 = [], l2 = [0]
Output: [0]
 

Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both l1 and l2 are sorted in non-decreasing order.
***************************************
# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def mergeTwoLists(self, l1: ListNode, l2: ListNode) -> ListNode:
        if not l1 and not l2:
            return None
        if not l1:
            return l2
        if not l2:
            return l1
        cur1 = l1
        cur2 = l2
        ans = ListNode(0,None)
        head = ans
        while cur1 and cur2:
            if cur1.val>=cur2.val:
                ans.next = cur2
                cur2 = cur2.next
            elif cur1.val<cur2.val:
                ans.next = cur1
                cur1 = cur1.next
            ans = ans.next
        if not cur1:
            ans.next = cur2
        else:
            ans.next = cur1
        return head.next
