******************QUESTION********************************
Link: https://leetcode.com/explore/challenge/card/december-leetcoding-challenge/569/week-1-december-1st-december-7th/3553/
Given the root of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.

 

Example 1:


Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]
Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]
Example 2:


Input: root = [5,1,7]
Output: [1,null,5,null,7]
 

Constraints:

The number of nodes in the given tree will be in the range [1, 100].
0 <= Node.val <= 1000
***********************************************************
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def increasingBST(self, root: TreeNode) -> TreeNode:
        node = root
        que = []
        visited = []
        # FOR TRAVERSING THE TREE IN A INORDER MANNER
        while True:
            while node:
                que.append(node)
                node = node.left
            if not que:
                break
            node = que.pop()
            visited.append(node.val)
            node = node.right
        i = 1
        root1 =  TreeNode(visited[0])
        head = root1
        n = len(visited)
        if n==1:
            return head
        root1.right = TreeNode(0)
        root1 = root1.right
        # FOR MAKING THE NEW TREE
        while True:
            root1.val = visited[i]
            if i==n-1:
                break
            root1.right = TreeNode(0)
            root1 = root1.right
            i += 1
        return head
