#########################QUESTION##########################
Given the root of a binary tree, collect a tree's nodes as if you were doing this:

Collect all the leaf nodes.
Remove all the leaf nodes.
Repeat until the tree is empty.
 

Example 1:


Input: root = [1,2,3,4,5]
Output: [[4,5,3],[2],[1]]
Explanation:
[[3,5,4],[2],[1]] and [[3,4,5],[2],[1]] are also considered correct answers since per each level it does not matter the order on which elements are returned.
Example 2:

Input: root = [1]
Output: [[1]]
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
-100 <= Node.val <= 100
################################################################
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def findLeaves(self, root: Optional[TreeNode]) -> List[List[int]]:
        to_be_sorted = []
        def dfs(node):                  # first do dfs of the tree to go to the leaf nodes; once reached the None, return 0
            if not node:
                return 0
            l = dfs(node.left)
            r = dfs(node.right)
            to_be_sorted.append((node.val,1+max(l,r)))     # thus, the height of the node is 1 + max(left_height,right_height); also store the node val and its height in a list
            return 1+max(l,r)
        res = dfs(root)
        to_be_sorted = sorted(to_be_sorted, key = lambda x: x[1])     # sort the list according to the height of the nodes in ascending order
        ans = []
        h = to_be_sorted[0][1]
        temp = []
        #print(to_be_sorted)
        for i in range(len(to_be_sorted)):
            if to_be_sorted[i][1]!=h:
                ans.append(temp)
                h = to_be_sorted[i][1]
                temp = [to_be_sorted[i][0]]
            else:
                temp.append(to_be_sorted[i][0])
        ans.append(temp)
        return ans
